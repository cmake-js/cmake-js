{"version":3,"names":[],"mappings":"","sources":["buildSystem.js"],"sourcesContent":["\"use strict\";\nlet CMake = require(\"./cMake\");\nlet Dist = require(\"./dist\");\nlet CMLog = require(\"./cmLog\");\nlet appCMakeJSConfig = require(\"./appCMakeJSConfig\");\nlet path = require(\"path\");\nlet _ = require(\"lodash\");\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\nlet Toolset = require(\"./toolset\");\n\nfunction BuildSystem(options) {\n    this.options = options || {};\n    this.options.directory = path.resolve(this.options.directory || process.cwd());\n    this.log = new CMLog(this.options);\n    let appConfig = appCMakeJSConfig(this.options.directory, this.log);\n    if (_.isPlainObject(appConfig)) {\n        if (_.keys(appConfig).length) {\n            this.log.verbose(\"CFG\", \"Applying CMake.js config from root package.json:\");\n            this.log.verbose(\"CFG\", JSON.stringify(appConfig));\n            // Applying applications's config, if there is no explicit runtime related options specified\n            this.options.runtime = this.options.runtime || appConfig.runtime;\n            this.options.runtimeVersion = this.options.runtimeVersion || appConfig.runtimeVersion;\n            this.options.arch = this.options.arch || appConfig.arch;\n        }\n    }\n    this.log.verbose(\"CFG\", \"Build system options:\");\n    this.log.verbose(\"CFG\", JSON.stringify(this.options));\n    this.cmake = new CMake(this.options);\n    this.dist = new Dist(this.options);\n    this.toolset = new Toolset(this.options);\n}\n\nBuildSystem.prototype._ensureInstalled = async(function* () {\n    try {\n        yield this.toolset.initialize(true);\n        yield this.dist.ensureDownloaded();\n    }\n    catch (e) {\n        this._showError(e);\n        throw e;\n    }\n});\n\nBuildSystem.prototype._showError = function (e) {\n    if (this.log.level === \"verbose\" || this.log.level === \"silly\") {\n        this.log.error(\"OMG\", e.stack);\n    }\n    else {\n        this.log.error(\"OMG\", e.message);\n    }\n};\n\nBuildSystem.prototype.install = function () {\n    return this._ensureInstalled();\n};\n\nBuildSystem.prototype._invokeCMake = async(function* (method) {\n    try {\n        yield this._ensureInstalled();\n        return yield this.cmake[method]();\n    }\n    catch (e) {\n        this._showError(e);\n        throw e;\n    }\n});\n\nBuildSystem.prototype.getConfigureCommand = function () {\n    return this._invokeCMake(\"getConfigureCommand\");\n};\n\nBuildSystem.prototype.configure = function () {\n    return this._invokeCMake(\"configure\");\n};\n\nBuildSystem.prototype.getBuildCommand = function () {\n    return this._invokeCMake(\"getBuildCommand\");\n};\n\nBuildSystem.prototype.build = function () {\n    return this._invokeCMake(\"build\");\n};\n\nBuildSystem.prototype.getCleanCommand = function () {\n    return this._invokeCMake(\"getCleanCommand\");\n};\n\nBuildSystem.prototype.clean = function () {\n    return this._invokeCMake(\"clean\");\n};\n\nBuildSystem.prototype.reconfigure = function () {\n    return this._invokeCMake(\"reconfigure\");\n};\n\nBuildSystem.prototype.rebuild = function () {\n    return this._invokeCMake(\"rebuild\");\n};\n\nBuildSystem.prototype.compile = function () {\n    return this._invokeCMake(\"compile\");\n};\n\nmodule.exports = BuildSystem;\n"],"file":"buildSystem.js"}