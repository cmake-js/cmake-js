{"version":3,"names":[],"mappings":"","sources":["processHelpers.js"],"sourcesContent":["\"use strict\";\nlet Bluebird = require(\"bluebird\");\nlet splitargs = require(\"splitargs\");\nlet _ = require(\"lodash\");\nlet spawn = require(\"child_process\").spawn;\nlet exec = require(\"child_process\").exec;\n\nlet processHelpers = {\n    run: function (command, options) {\n        options = _.defaults(options, {silent: false});\n        return new Bluebird(function (resolve, reject) {\n            let args = splitargs(command);\n            let name = args[0];\n            args.splice(0, 1);\n            let child = spawn(name, args, {stdio: options.silent ? \"ignore\" : \"inherit\"});\n            let ended = false;\n            child.on(\"error\", function (e) {\n                if (!ended) {\n                    reject(e);\n                    ended = true;\n                }\n            });\n            child.on(\"exit\", function (code, signal) {\n                if (!ended) {\n                    if (code === 0) {\n                        resolve();\n                    }\n                    else {\n                        reject(new Error(\"Process terminated: \" + code || signal));\n                    }\n                    ended = true;\n                }\n            });\n        });\n    },\n    exec: function(command) {\n        return new Bluebird(function (resolve, reject) {\n            exec(command, function (err, stdout, stderr) {\n                if (err) {\n                    reject(new Error(err.message + \"\\n\" + (stdout || stderr)));\n                }\n                else {\n                   resolve(stdout);\n                }\n            });\n        });\n    }\n};\n\nmodule.exports = processHelpers;\n"],"file":"processHelpers.js"}