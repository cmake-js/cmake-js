{"version":3,"names":[],"mappings":"","sources":["runtimePaths.js"],"sourcesContent":["\"use strict\";\nlet _ = require(\"lodash\");\nlet assert = require(\"assert\");\nlet semver = require(\"semver\");\n\nlet NODE_MIRROR = process.env.NVM_NODEJS_ORG_MIRROR || \"https://nodejs.org/dist\";\nlet IOJS_MIRROR = process.env.NVM_IOJS_ORG_MIRROR || \"https://iojs.org/dist\";\nlet ELECTRON_MIRROR = process.env.ELECTRON_MIRROR || \"https://atom.io/download/atom-shell\";\n\nlet runtimePaths = {\n    node: function (targetOptions) {\n        if (semver.lt(targetOptions.runtimeVersion, \"4.0.0\")) {\n            return {\n                externalPath: NODE_MIRROR + \"/v\" + targetOptions.runtimeVersion + \"/\",\n                winLibs: [{\n                    dir: targetOptions.isX64 ? \"x64\" : \"\",\n                    name: targetOptions.runtime + \".lib\"\n                }],\n                tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n                headerOnly: false\n            };\n        }\n        else {\n            return {\n                externalPath: NODE_MIRROR + \"/v\" + targetOptions.runtimeVersion + \"/\",\n                winLibs: [{\n                    dir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\n                    name: targetOptions.runtime + \".lib\"\n                }],\n                tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \"-headers.tar.gz\",\n                headerOnly: true\n            };\n        }\n    },\n    iojs: function (targetOptions) {\n        return {\n            externalPath: IOJS_MIRROR + \"/v\" + targetOptions.runtimeVersion + \"/\",\n            winLibs: [{\n                dir: targetOptions.isX64 ? \"win-x64\" : \"win-x86\",\n                name: targetOptions.runtime + \".lib\"\n            }],\n            tarPath: targetOptions.runtime + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n            headerOnly: false\n        };\n    },\n    nw: function (targetOptions) {\n        if (semver.gte(targetOptions.runtimeVersion, \"0.13.0\")) {\n            return {\n                externalPath: \"https://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\n                winLibs: [\n                    {\n                        dir: targetOptions.isX64 ? \"x64\" : \"\",\n                        name: targetOptions.runtime + \".lib\"\n                    },\n                    {\n                        dir: targetOptions.isX64 ? \"x64\" : \"\",\n                        name: \"node.lib\"\n                    }\n                ],\n                tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n                headerOnly: false\n            };\n        }\n        return {\n            externalPath: \"https://node-webkit.s3.amazonaws.com/v\" + targetOptions.runtimeVersion + \"/\",\n            winLibs: [{\n                dir: targetOptions.isX64 ? \"x64\" : \"\",\n                name: targetOptions.runtime + \".lib\"\n            }],\n            tarPath: \"nw-headers-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n            headerOnly: false\n        };\n    },\n    electron: function (targetOptions) {\n        return {\n            externalPath: ELECTRON_MIRROR + \"/v\" + targetOptions.runtimeVersion + \"/\",\n            winLibs: [{\n                dir: targetOptions.isX64 ? \"x64\" : \"\",\n                name: \"node.lib\"\n            }],\n            tarPath: \"node\" + \"-v\" + targetOptions.runtimeVersion + \".tar.gz\",\n            headerOnly: semver.gte(targetOptions.runtimeVersion, '4.0.0-alpha')\n        };\n    },\n    get: function (targetOptions) {\n        assert(_.isObject(targetOptions));\n\n        let runtime = targetOptions.runtime;\n        let func = runtimePaths[runtime];\n        let paths;\n        if (_.isFunction(func) && _.isPlainObject(paths = func(targetOptions))) {\n            return paths;\n        }\n        throw new Error(\"Unknown runtime: \" + runtime);\n    }\n};\n\nmodule.exports = runtimePaths;\n"],"file":"runtimePaths.js"}