{"version":3,"names":[],"mappings":"","sources":["cmLog.js"],"sourcesContent":["\"use strict\";\nlet log = require(\"npmlog\");\n\nfunction CMLog(options) {\n    this.options = options || {};\n    this.debug = require(\"debug\")(this.options.logName || \"cmake-js\");\n}\n\nObject.defineProperties(CMLog.prototype, {\n    level: {\n        get: function() {\n            if (this.options.noLog) {\n                return \"silly\";\n            }\n            else {\n                return log.level;\n            }\n        }\n    }\n});\n\nCMLog.prototype.silly = function(cat, msg) {\n    if (this.options.noLog) {\n        this.debug(cat + \": \" + msg);\n    }\n    else {\n        log.silly(cat, msg);\n    }\n};\n\nCMLog.prototype.verbose = function(cat, msg) {\n    if (this.options.noLog) {\n        this.debug(cat + \": \" + msg);\n    }\n    else {\n        log.verbose(cat, msg);\n    }\n};\n\nCMLog.prototype.info = function(cat, msg) {\n    if (this.options.noLog) {\n        this.debug(cat + \": \" + msg);\n    }\n    else {\n        log.info(cat, msg);\n    }\n};\n\nCMLog.prototype.warn = function(cat, msg) {\n    if (this.options.noLog) {\n        this.debug(cat + \": \" + msg);\n    }\n    else {\n        log.warn(cat, msg);\n    }\n};\n\nCMLog.prototype.http = function(cat, msg) {\n    if (this.options.noLog) {\n        this.debug(cat + \": \" + msg);\n    }\n    else {\n        log.http(cat, msg);\n    }\n};\n\nCMLog.prototype.error = function(cat, msg) {\n    if (this.options.noLog) {\n        this.debug(cat + \": \" + msg);\n    }\n    else {\n        log.error(cat, msg);\n    }\n};\n\nmodule.exports = CMLog;"],"file":"cmLog.js"}