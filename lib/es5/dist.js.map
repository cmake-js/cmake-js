{"version":3,"names":[],"mappings":"","sources":["dist.js"],"sourcesContent":["\"use strict\";\nlet environment = require(\"./environment\");\nlet path = require(\"path\");\nlet urljoin = require(\"url-join\");\nlet Promise = require(\"bluebird\");\nlet fs = require(\"fs-extra\");\nlet _ = require(\"lodash\");\nlet CMLog = require(\"./cmLog\");\nlet TargetOptions = require(\"./targetOptions\");\nlet runtimePaths = require(\"./runtimePaths\");\nlet async = Promise.coroutine;\nlet Downloader = require(\"./downloader\");\n\nfunction testSum(sums, sum, fPath) {\n    let serverSum = _.first(sums.filter(function (s) {\n        return s.getPath === fPath;\n    }));\n    if (serverSum && serverSum.sum === sum) {\n        return;\n    }\n    throw new Error(\"SHA sum of file '\" + fPath + \"' mismatch!\");\n}\n\nfunction Dist(options) {\n    this.options = options || {};\n    this.log = new CMLog(this.options);\n    this.targetOptions = new TargetOptions(this.options);\n    this.downloader = new Downloader(this.options);\n}\n\n// Props\nObject.defineProperties(Dist.prototype, {\n    internalPath: {\n        get: function () {\n            return path.join(\n                environment.home,\n                \".cmake-js\",\n                (this.targetOptions.runtime) + \"-\" + this.targetOptions.arch,\n                \"v\" + this.targetOptions.runtimeVersion);\n        }\n    },\n    externalPath: {\n        get: function () {\n            return runtimePaths.get(this.targetOptions).externalPath;\n        }\n    },\n    downloaded: {\n        get: function () {\n            let headers = false;\n            let libs = true;\n            let stat = getStat(this.internalPath);\n            if (stat.isDirectory()) {\n                if (this.headerOnly) {\n                    stat = getStat(path.join(this.internalPath, \"include/node/node.h\"));\n                    headers = stat.isFile();\n                }\n                else {\n                    stat = getStat(path.join(this.internalPath, \"src/node.h\"));\n                    if (stat.isFile()) {\n                        stat = getStat(path.join(this.internalPath, \"deps/v8/include/v8.h\"));\n                        headers = stat.isFile();\n                    }\n                }\n                if (environment.isWin) {\n                    for (let libPath of this.winLibs) {\n                        stat = getStat(libPath);\n                        libs = libs && stat.isFile();\n                    }\n                }\n            }\n            return headers && libs;\n\n            function getStat(path) {\n                try {\n                    return fs.statSync(path);\n                }\n                catch (e) {\n                    return {\n                        isFile: _.constant(false),\n                        isDirectory: _.constant(false)\n                    };\n                }\n            }\n        }\n    },\n    winLibs: {\n        get: function () {\n            let libs = runtimePaths.get(this.targetOptions).winLibs;\n            let result = [];\n            for (let lib of libs) {\n                result.push(path.join(this.internalPath, lib.dir, lib.name));\n            }\n            return result;\n        }\n    },\n    headerOnly: {\n        get: function () {\n            return runtimePaths.get(this.targetOptions).headerOnly;\n        }\n    }\n});\n\n// Methods\nDist.prototype.ensureDownloaded = async(function* () {\n    if (!this.downloaded) {\n        yield this.download();\n    }\n});\n\nDist.prototype.download = async(function* () {\n    let log = this.log;\n    log.info(\"DIST\", \"Downloading distribution files.\");\n    yield fs.ensureDir(this.internalPath);\n    let sums = yield this._downloadShaSums();\n    yield Promise.all([this._downloadLibs(sums), this._downloadTar(sums)]);\n});\n\nDist.prototype._downloadShaSums = async(function* () {\n    if (this.targetOptions.runtime === \"node\" || this.targetOptions.runtime === \"iojs\") {\n        let sumUrl = urljoin(this.externalPath, \"SHASUMS256.txt\");\n        let log = this.log;\n        log.http(\"DIST\", \"\\t- \" + sumUrl);\n        return (yield this.downloader.downloadString(sumUrl))\n            .split(\"\\n\")\n            .map(function (line) {\n                let parts = line.split(/\\s+/);\n                return {\n                    getPath: parts[1],\n                    sum: parts[0]\n                };\n            })\n            .filter(function (i) {\n                return i.getPath && i.sum;\n            });\n    }\n    else {\n        return null;\n    }\n});\n\nDist.prototype._downloadTar = async(function* (sums) {\n    let log = this.log;\n    let self = this;\n    let tarLocalPath = runtimePaths.get(self.targetOptions).tarPath;\n    let tarUrl = urljoin(self.externalPath, tarLocalPath);\n    log.http(\"DIST\", \"\\t- \" + tarUrl);\n\n    let sum = yield this.downloader.downloadTgz(tarUrl, {\n        hash: sums ? \"sha256\" : null,\n        cwd: self.internalPath,\n        strip: 1,\n        filter: function (entryPath) {\n            if (entryPath === self.internalPath) {\n                return true;\n            }\n            let ext = path.extname(entryPath);\n            return ext && ext.toLowerCase() === \".h\";\n        }\n    });\n\n    if (sums) {\n        testSum(sums, sum, tarLocalPath);\n    }\n});\n\nDist.prototype._downloadLibs = async(function* (sums) {\n    const log = this.log;\n    const self = this;\n    if (!environment.isWin) {\n        return;\n    }\n\n    const paths = runtimePaths.get(self.targetOptions);\n    for (const dirs of paths.winLibs) {\n        const subDir = dirs.dir;\n        const fn = dirs.name;\n        const fPath = subDir ? urljoin(subDir, fn) : fn;\n        const libUrl = urljoin(self.externalPath, fPath);\n        log.http(\"DIST\", \"\\t- \" + libUrl);\n\n        yield fs.ensureDir(path.join(self.internalPath, subDir));\n\n        const sum = yield this.downloader.downloadFile(libUrl, {\n            path: path.join(self.internalPath, fPath),\n            hash: sums ? \"sha256\" : null\n        });\n\n        if (sums) {\n            testSum(sums, sum, fPath);\n        }\n    }\n});\n\nmodule.exports = Dist;\n"],"file":"dist.js"}