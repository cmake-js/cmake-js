{"version":3,"names":[],"mappings":"","sources":["downloader.js"],"sourcesContent":["\"use strict\";\nlet Promise = require(\"bluebird\");\nlet crypto = require(\"crypto\");\nlet request = require(\"request\");\nlet async = Promise.coroutine;\nlet MemoryStream = require(\"memory-stream\");\nlet zlib = require(\"zlib\");\nlet tar = require(\"tar\");\nlet fs = require(\"fs\");\nlet _ = require(\"lodash\");\nlet unzip = require(\"unzipper\");\nlet CMLog = require(\"./cmLog\");\n\nfunction Downloader(options) {\n    this.options = options || {};\n    this.log = new CMLog(this.options);\n}\n\nDownloader.prototype.downloadToStream = function(url, stream, hash) {\n    let self = this;\n    let shasum = hash ? crypto.createHash(hash) : null;\n    return new Promise(function (resolve, reject) {\n        let length = 0;\n        let done = 0;\n        let lastPercent = 0;\n        request\n            .get(url)\n            .on(\"error\", function (err) {\n                reject(err);\n            })\n            .on(\"response\", function(data) {\n                length = parseInt(data.headers[\"content-length\"]);\n                if (!_.isNumber(length)) {\n                    length = 0;\n                }\n            })\n            .on(\"data\", function (chunk) {\n                if (shasum) {\n                    shasum.update(chunk);\n                }\n                if (length) {\n                    done += chunk.length;\n                    let percent = done / length * 100;\n                    percent = Math.round(percent / 10) * 10 + 10;\n                    if (percent > lastPercent) {\n                        self.log.verbose(\"DWNL\", \"\\t\" + lastPercent + \"%\");\n                        lastPercent = percent;\n                    }\n                }\n            })\n            .pipe(stream);\n\n        stream.once(\"error\", function (err) {\n            reject(err);\n        });\n\n        stream.once(\"finish\", function () {\n            resolve(shasum ? shasum.digest(\"hex\") : undefined);\n        });\n    });\n};\n\nDownloader.prototype.downloadString = async(function* (url) {\n    let result = new MemoryStream();\n    yield this.downloadToStream(url, result);\n    return result.toString();\n});\n\nDownloader.prototype.downloadFile = async(function* (url, options) {\n    if (_.isString(options)) {\n        options.path = options;\n    }\n    let result = fs.createWriteStream(options.path);\n    let sum = yield this.downloadToStream(url, result, options.hash);\n    this.testSum(url, sum, options);\n    return sum;\n});\n\nDownloader.prototype.downloadTgz = async(function*(url, options) {\n    if (_.isString(options)) {\n        options.cwd = options;\n    }\n    let gunzip = zlib.createGunzip();\n    let extractor = tar.extract(options);\n    gunzip.pipe(extractor);\n    let sum =  yield this.downloadToStream(url, gunzip, options.hash);\n    this.testSum(url, sum, options);\n    return sum;\n});\n\nDownloader.prototype.downloadZip = async(function*(url, options) {\n    if (_.isString(options)) {\n        options.path = options;\n    }\n    let extractor = new unzip.Extract(options);\n    let sum =  yield this.downloadToStream(url, extractor, options.hash);\n    this.testSum(url, sum, options);\n    return sum;\n});\n\nDownloader.prototype.testSum = function(url, sum, options) {\n    if (options.hash && sum && options.sum && options.sum !== sum) {\n        throw new Error(options.hash.toUpperCase() + \" sum of download '\" + url + \"' mismatch!\");\n    }\n};\n\nmodule.exports = Downloader;\n"],"file":"downloader.js"}