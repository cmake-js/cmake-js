{"version":3,"names":[],"mappings":"","sources":["toolset.js"],"sourcesContent":["\"use strict\";\nlet Promise = require(\"bluebird\");\nlet async = Promise.coroutine;\nlet _ = require(\"lodash\");\nlet TargetOptions = require(\"./targetOptions\");\nlet environment = require(\"./environment\");\nlet assert = require(\"assert\");\nlet vsDetect = require(\"./vsDetect\");\nlet path = require(\"path\");\nlet CMLog = require(\"./cmLog\");\n\nfunction Toolset(options) {\n    this.options = options || {};\n    this.targetOptions = new TargetOptions(this.options);\n    this.generator = options.generator;\n    this.toolset = options.toolset;\n    this.target = options.target;\n    this.cCompilerPath = null;\n    this.cppCompilerPath = null;\n    this.compilerFlags = [];\n    this.linkerFlags = [];\n    this.makePath = null;\n    this.log = new CMLog(this.options);\n    this._initialized = false;\n}\n\nToolset.prototype.initialize = async(function*(install) {\n    if (!this._initialized) {\n        if (environment.isWin) {\n            yield this.initializeWin(install);\n        }\n        else {\n            this.initializePosix(install);\n        }\n        this._initialized = true;\n    }\n});\n\nToolset.prototype.initializePosix = function (install) {\n    // 1: Compiler\n    if (!environment.isGPPAvailable && !environment.isClangAvailable) {\n        if (environment.isOSX) {\n            throw new Error(\"C++ Compiler toolset is not available. Install Xcode Commandline Tools from Apple Dev Center, or install Clang with homebrew by invoking: 'brew install llvm --with-clang --with-asan'.\");\n        }\n        else {\n            throw new Error(\"C++ Compiler toolset is not available. Install proper compiler toolset with your package manager, eg. 'sudo apt-get install g++'.\");\n        }\n    }\n\n    if (this.options.preferClang && environment.isClangAvailable) {\n        if (install) {\n            this.log.info(\"TOOL\", \"Using clang++ compiler, because preferClang option is set, and clang++ is available.\");\n        }\n        this.cppCompilerPath = \"clang++\";\n        this.cCompilerPath = \"clang\";\n    }\n    else if (this.options.preferGnu && environment.isGPPAvailable) {\n        if (install) {\n            this.log.info(\"TOOL\", \"Using g++ compiler, because preferGnu option is set, and g++ is available.\");\n        }\n        this.cppCompilerPath = \"g++\";\n        this.cCompilerPath = \"gcc\";\n    }\n    // if it's already set because of options...\n    if (this.generator) {\n        if (install) {\n            this.log.info(\"TOOL\", \"Using \" + this.options.generator + \" generator, as specified from commandline.\");\n        }\n    }\n    // 2: Generator\n    else if (environment.isOSX) {\n        if (this.options.preferXcode) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Xcode generator, because preferXcode option is set.\");\n            }\n            this.generator = \"Xcode\";\n        }\n        else if (this.options.preferMake && environment.isMakeAvailable) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator, because preferMake option is set, and make is available.\");\n            }\n            this.generator = \"Unix Makefiles\";\n        }\n        else if (environment.isNinjaAvailable) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Ninja generator, because ninja is available.\");\n            }\n            this.generator = \"Ninja\";\n        }\n        else {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator.\");\n            }\n            this.generator = \"Unix Makefiles\";\n        }\n    }\n    else {\n        if (this.options.preferMake && environment.isMakeAvailable) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator, because preferMake option is set, and make is available.\");\n            }\n            this.generator = \"Unix Makefiles\";\n        }\n        else if (environment.isNinjaAvailable) {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Ninja generator, because ninja is available.\");\n            }\n            this.generator = \"Ninja\";\n        }\n        else {\n            if (install) {\n                this.log.info(\"TOOL\", \"Using Unix Makefiles generator.\");\n            }\n            this.generator = \"Unix Makefiles\";\n        }\n    }\n\n    // 3: Flags\n    if (environment.isOSX) {\n        if (install) {\n            this.log.verbose(\"TOOL\", \"Setting default OSX compiler flags.\");\n        }\n\n        this.compilerFlags.push(\"-D_DARWIN_USE_64_BIT_INODE=1\");\n        this.compilerFlags.push(\"-D_LARGEFILE_SOURCE\");\n        this.compilerFlags.push(\"-D_FILE_OFFSET_BITS=64\");\n        this.compilerFlags.push(\"-DBUILDING_NODE_EXTENSION\");\n        this.linkerFlags.push(\"-undefined dynamic_lookup\");\n    }\n\n    // 4: Build target\n    if (this.options.target) {\n        this.log.info(\"TOOL\", \"Building only the \" + this.options.target + \" target, as specified from the command line.\");\n    }\n};\n\nToolset.prototype.initializeWin = async(function*(install) {\n    // Visual Studio:\n    // if it's already set because of options...\n    if (this.generator) {\n        if (install) {\n            this.log.info(\"TOOL\", \"Using \" + this.options.generator + \" generator, as specified from commandline.\");\n        }\n\n        this.linkerFlags.push(\"/DELAYLOAD:NODE.EXE\");\n\n        if (this.targetOptions.isX86) {\n            if (install) {\n                this.log.verbose(\"TOOL\", \"Setting SAFESEH:NO linker flag.\");\n            }\n            this.linkerFlags.push(\"/SAFESEH:NO\");\n        }\n        return;\n    }\n    let topVS = yield this._getTopSupportedVisualStudioGenerator();\n    //if (!this.options.noMSVC) {\n    if (topVS) {\n        if (install) {\n            this.log.info(\"TOOL\", `Using ${topVS} generator.`);\n        }\n        this.generator = topVS;\n\n        this.linkerFlags.push(\"/DELAYLOAD:NODE.EXE\");\n\n        if (this.targetOptions.isX86) {\n            if (install) {\n                this.log.verbose(\"TOOL\", \"Setting SAFESEH:NO linker flag.\");\n            }\n            this.linkerFlags.push(\"/SAFESEH:NO\");\n        }\n    }\n    else {\n        throw new Error(\"There is no Visual C++ compiler installed. Install Visual C++ Build Toolset or Visual Studio.\");\n    }\n});\n\nToolset.prototype._getTopSupportedVisualStudioGenerator = async(function*() {\n    let CMake = require(\"./cMake\");\n    assert(environment.isWin);\n    let list = yield CMake.getGenerators(this.options);\n    let maxVer = 0;\n    let result = null;\n    for (let gen of list) {\n        let found = /^visual studio (\\d+)/i.exec(gen);\n        if (!found) {\n            continue;\n        }\n\n        let ver = parseInt(found[1]);\n        if (ver <= maxVer) {\n            continue;\n        }\n\n        const is64Bit = gen.endsWith(\"Win64\");\n        if ((this.targetOptions.isX86 && is64Bit) || (this.targetOptions.isX64 && !is64Bit)) {\n            continue;\n        }\n\n        if (yield vsDetect.isInstalled(ver + \".0\")) {\n            result = gen;\n            maxVer = ver;\n        }\n    }\n    return result;\n});\n\nmodule.exports = Toolset;\n"],"file":"toolset.js"}