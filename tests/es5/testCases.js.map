{"version":3,"names":[],"mappings":"","sources":["testCases.js"],"sourcesContent":["\"use strict\";\nlet assert = require(\"assert\");\nlet lib = require(\"../../\");\nlet BuildSystem = lib.BuildSystem;\nlet _ = require(\"lodash\");\nlet path = require(\"path\");\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\nlet fs = require(\"fs-extra\");\n\nlet testCases = {\n    buildPrototypeWithDirectoryOption: async(function*(options) {\n        options = _.extend({\n            directory: path.resolve(path.join(__dirname, \"./prototype\"))\n        }, options);\n        let buildSystem = new BuildSystem(options);\n        yield buildSystem.rebuild();\n        assert.ok((yield fs.stat(path.join(__dirname, \"prototype/build/Release/addon.node\"))).isFile());\n    }),\n    buildPrototype2WithCWD: async(function*(options) {\n        let cwd = process.cwd();\n        process.chdir(path.resolve(path.join(__dirname, \"./prototype2\")));\n        let buildSystem = new BuildSystem(options);\n        try {\n            yield buildSystem.rebuild();\n            assert.ok((yield fs.stat(path.join(__dirname, \"prototype2/build/Release/addon2.node\"))).isFile());\n        }\n        finally {\n            process.chdir(cwd);\n        }\n    }),\n    shouldConfigurePreC11Properly: async(function*(options) {\n        options = _.extend({\n            directory: path.resolve(path.join(__dirname, \"./prototype\")),\n            std: \"c++98\"\n        }, options);\n        let buildSystem = new BuildSystem(options);\n        if (!/visual studio/i.test(buildSystem.toolset.generator)) {\n            let command = yield buildSystem.getConfigureCommand();\n            assert.equal(command.indexOf(\"-std=c++11\"), -1, \"c++11 still forced\");\n        }\n    }),\n    configureWithCustomOptions: async(function*(options) {\n        options = _.extend({\n            directory: path.resolve(path.join(__dirname, \"./prototype\")),\n            cMakeOptions: {\n              foo: \"bar\"\n            }\n        }, options);\n        let buildSystem = new BuildSystem(options);\n\n        let command = yield buildSystem.getConfigureCommand();\n        assert.notEqual(command.indexOf(\"-Dfoo=\\\"bar\\\"\"), -1, \"custom options added\");\n    })\n};\n\nmodule.exports = testCases;\n"],"file":"testCases.js"}