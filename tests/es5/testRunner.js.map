{"version":3,"names":[],"mappings":"","sources":["testRunner.js"],"sourcesContent":["\"use strict\";\n/* global it */\nlet lib = require(\"../../\");\nlet environment = lib.environment;\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\nlet _ = require(\"lodash\");\nlet log = require(\"npmlog\");\nlet util = require(\"util\");\n\nfunction* generateRuntimeOptions() {\n    function* generateForNode(arch) {\n        // Old:\n        yield {\n            runtime: \"node\",\n            runtimeVersion: \"0.10.36\",\n            arch: arch\n        };\n\n        // LTS:\n        yield {\n            runtime: \"node\",\n            runtimeVersion: \"4.4.2\",\n            arch: arch\n        };\n\n        // Current:\n        if (environment.runtimeVersion !== \"5.10.0\") {\n            yield {\n                runtime: \"node\",\n                runtimeVersion: \"5.10.0\",\n                arch: arch\n            };\n        }\n    }\n\n    function* generateForNWJS(arch) {\n        // Latest:\n        yield {\n            runtime: \"nw\",\n            runtimeVersion: \"0.13.2\",\n            arch: arch\n        };\n    }\n\n    function* generateForElectron(arch) {\n        // Latest:\n        yield {\n            runtime: \"electron\",\n            runtimeVersion: \"0.37.3\",\n            arch: arch\n        };\n    }\n\n    function* generateForArch(arch) {\n        yield* generateForNode(arch);\n        yield* generateForNWJS(arch);\n        yield* generateForElectron(arch);\n    }\n\n    if (environment.isWin) {\n        yield* generateForArch(\"x64\");\n        yield* generateForArch(\"ia32\");\n    }\n    else {\n        yield* generateForArch();\n    }\n\n    // Actual:\n    yield {};\n}\n\nfunction* generateOptions() {\n    for (let runtimeOptions of generateRuntimeOptions()) {\n        if (environment.isWin) {\n            // V C++:\n            yield runtimeOptions;\n        }\n        else {\n            // Clang, Make\n            yield _.extend({}, runtimeOptions, {preferClang: true, referMake: true});\n\n            // Clang, Ninja\n            yield _.extend({}, runtimeOptions, {preferClang: true});\n\n            // g++, Make\n            yield _.extend({}, runtimeOptions, {preferGnu: true, referMake: true});\n\n            // g++, Ninja\n            yield _.extend({}, runtimeOptions, {preferGnu: true});\n\n            // Default:\n            yield runtimeOptions;\n        }\n    }\n}\n\nlet testRunner = {\n    runCase: function (testCase, options) {\n        for (let testOptions of generateOptions()) {\n            let currentOptions = _.extend({}, testOptions, options || {});\n            it(\"should build with: \" + util.inspect(currentOptions), function (done) {\n                async(function*() {\n                    log.info(\"TEST\", \"Running case for options of: \" + util.inspect(currentOptions));\n                    yield testCase(currentOptions);\n                })().nodeify(done);\n            });\n        }\n    }\n};\n\nmodule.exports = testRunner;"],"file":"testRunner.js"}