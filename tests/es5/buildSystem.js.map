{"version":3,"names":[],"mappings":"","sources":["buildSystem.js"],"sourcesContent":["\"use strict\";\n/* global describe,it,before */\n\nlet assert = require(\"assert\");\nlet lib = require(\"../../\");\nlet CMake = lib.CMake;\nlet BuildSystem = lib.BuildSystem;\nlet _ = require(\"lodash\");\nlet path = require(\"path\");\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\nlet log = require(\"npmlog\");\nlet testRunner = require(\"./testRunner\");\nlet testCases = require(\"./testCases\");\n\ndescribe(\"BuildSystem\", function () {\n    this.timeout(300000);\n\n    before(function() {\n        if (process.env.UT_LOG_LEVEL) {\n            log.level = process.env.UT_LOG_LEVEL;\n            log.resume();\n        }\n        lib.locateNAN.__projectRoot = path.resolve(path.join(__dirname, \"../../\"));\n    });\n\n    after(function() {\n        lib.locateNAN.__projectRoot = undefined;\n    });\n\n    describe(\"Build with various options\", function() {\n        testRunner.runCase(testCases.buildPrototypeWithDirectoryOption);\n    });\n\n    it(\"should provide list of generators\", function (done) {\n        async(function*() {\n            let gens = yield CMake.getGenerators();\n            assert(_.isArray(gens));\n            assert(gens.length > 0);\n            assert.equal(gens.filter(function (g) { return g.length; }).length, gens.length);\n        })().nodeify(done);\n    });\n\n    it(\"should rebuild prototype if cwd is the source directory\", function (done) {\n        testCases.buildPrototype2WithCWD().nodeify(done);\n    });\n\n    it(\"should run with old GNU compilers\", function (done) {\n        testCases.shouldConfigurePreC11Properly().nodeify(done);\n    });\n\n    it(\"should configure with custom option\", function (done) {\n        testCases.configureWithCustomOptions().nodeify(done);\n    });\n});\n"],"file":"buildSystem.js"}